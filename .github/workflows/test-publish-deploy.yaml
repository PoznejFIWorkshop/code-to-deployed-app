name: Test, Deploy, Publish


on: [push]

jobs:
  pytest:
    # https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Test with pytest
        run: |
          pytest .

  docker-build-and-publish-image:
    needs: pytest

    # https://github.com/marketplace/actions/build-and-push-docker-images
    # We can skip some of the steps.
    runs-on: ubuntu-latest
    steps:
      # - name: Set up QEMU
      #   uses: docker/setup-qemu-action@v2

      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: poznejfiworkshop/factorial:latest


  deploy:
    # https://github.com/marketplace/actions/ssh-remote-commands
    # with inspiration (but different aproach) from: https://maximorlov.com/automate-your-docker-deployments/
    # We will build the image on the remote machine
    needs: [pytest, docker-build-and-publish-image]
    runs-on: ubuntu-latest
    steps:
      - name: Commands over SSH
        uses: appleboy/ssh-action@v0.1.7
        with:
          host:     ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          script_stop: true
          script: |
            cd ~/example_project
            docker-compose pull
            docker-compose up -d
            echo "Successfully deployed, hooray!"
